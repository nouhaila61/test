#include "main.h"

/**
 * print_char - prints a character to stdout
 * @arg: the character to print
 *
 * Return: the number of characters printed
 */
int print_char(va_list arg)
{
	return (_putchar(va_arg(arg, int)));
}

/**
 * print_string - prints a string to stdout
 * @arg: the string to print
 *
 * Return: the number of characters printed
 */
int print_string(va_list arg)
{
	char *s = va_arg(arg, char *);

	if (s == NULL)
		return (_puts("(null)"));
	else
		return (_puts(s));
}

/**
 * print_integer - prints an integer to stdout
 * @arg: The integer to print
 *
 * Return: the number of digits printed
 */
int print_integer(va_list arg)
{
	return (_print_integer(va_arg(arg, int)));
}

/**
 * print_binary - prints an unsigned integer in binary format to stdout
 * @arg: The unsigned integer to print
 *
 * Return: the number of digits printed
 */
int print_binary(va_list arg)
{
	unsigned int n = va_arg(arg, unsigned int);
	int len = 0, i;

	if (n == 0)
		return (_putchar('0'));

	for (i = 31; i >= 0; i--)
	{
		if (n & (1 << i))
		{
			len += _putchar('1');
		}
		else
		{
			len += _putchar('0');
		}
	}
	return (len);
}

/**
 * print_percent - prints a percent sign to stdout
 *
 * Return: the number of characters printed
 */
int print_percent(void)
{
	return (_putchar('%'));
}

/**
 * _printf - produces output according to a format
 * @format: a string containing zero or more directives
 *
 * Return: the number of characters printed
 */
int _printf(const char *format, ...)
{
	unsigned int i, len = 0;
	va_list arg;

	va_start(arg, format);
	if (!format || (format[0] == '%' && !format[1]))
		return (-1);
	else if (format[0] == '%' && format[1] == ' ' && !format[2])
		return (-1);
	else if (format != NULL)
	{
		for (i = 0; format && format[i]; i++)
		{
			if (format[i] == '%')
			{
				i++;
				while (format[i] == ' ')
					i++;
				if (format[i] == '\0')
					return (-1);
				if (format[i] == '%')
					len += print_percent();
				else if (format[i] == 'c')
					len += print_char(arg);
				else if (format[i] == 's')
					len += print_string(arg);
				else if (format[i] == 'd' || format[i] == 'i')
					len += print_integer(arg);
				else if (format[i] == 'b')
					len += print_binary(arg);
				else
				{
					len += _putchar('%');
					len += _putchar(format[i]);
				}
			}

			else
				len += _putchar(format[i]);
		}
	}
	va_end(arg);
	return (len);
}

/**
 * _print_integer - prints an integer to stdout
 * @n: The integer to print
 *
 * Return: On success the number of digits printed.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _print_integer(int n)
{
	unsigned int m = (n < 0) ? -n : n;
	int len = (n < 0) ? 1 : 0;

	if (n < 0)
		_putchar('-');
	if (m / 10)
		len += _print_integer(m / 10);
	len += _putchar((m % 10) + '0');

	return (len);
}

/**
 * _putchar - writes a character to stdout
 * @c: the character to print
 *
 * Return: 1 on success, -1 on error
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

/**
 * _puts - writes a string to stdout
 * @s: The string to print
 *
 * Return: On success the length of the string.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _puts(char *s)
{
	int i, len = 0;

	for (i = 0; s[i]; i++)
		len += _putchar(s[i]);
	return (len);
}
